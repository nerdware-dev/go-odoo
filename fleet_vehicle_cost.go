package odoo

// FleetVehicleCost represents fleet.vehicle.cost model.
type FleetVehicleCost struct {
	LastUpdate    *Time      `xmlrpc:"__last_update,omitempty"`
	Amount        *Float     `xmlrpc:"amount,omitempty"`
	AutoGenerated *Bool      `xmlrpc:"auto_generated,omitempty"`
	CompanyId     *Many2One  `xmlrpc:"company_id,omitempty"`
	ContractId    *Many2One  `xmlrpc:"contract_id,omitempty"`
	CostIds       *Relation  `xmlrpc:"cost_ids,omitempty"`
	CostSubtypeId *Many2One  `xmlrpc:"cost_subtype_id,omitempty"`
	CostType      *Selection `xmlrpc:"cost_type,omitempty"`
	CreateDate    *Time      `xmlrpc:"create_date,omitempty"`
	CreateUid     *Many2One  `xmlrpc:"create_uid,omitempty"`
	CurrencyId    *Many2One  `xmlrpc:"currency_id,omitempty"`
	Date          *Time      `xmlrpc:"date,omitempty"`
	Description   *String    `xmlrpc:"description,omitempty"`
	DisplayName   *String    `xmlrpc:"display_name,omitempty"`
	Id            *Int       `xmlrpc:"id,omitempty"`
	Name          *String    `xmlrpc:"name,omitempty"`
	Odometer      *Float     `xmlrpc:"odometer,omitempty"`
	OdometerId    *Many2One  `xmlrpc:"odometer_id,omitempty"`
	OdometerUnit  *Selection `xmlrpc:"odometer_unit,omitempty"`
	ParentId      *Many2One  `xmlrpc:"parent_id,omitempty"`
	VehicleId     *Many2One  `xmlrpc:"vehicle_id,omitempty"`
	WriteDate     *Time      `xmlrpc:"write_date,omitempty"`
	WriteUid      *Many2One  `xmlrpc:"write_uid,omitempty"`
}

// FleetVehicleCosts represents array of fleet.vehicle.cost model.
type FleetVehicleCosts []FleetVehicleCost

// FleetVehicleCostModel is the odoo model name.
const FleetVehicleCostModel = "fleet.vehicle.cost"

// Many2One convert FleetVehicleCost to *Many2One.
func (fvc *FleetVehicleCost) Many2One() *Many2One {
	return NewMany2One(fvc.Id.Get(), "")
}

// CreateFleetVehicleCost creates a new fleet.vehicle.cost model and returns its id.
func (c *Client) CreateFleetVehicleCost(fvc *FleetVehicleCost) (int64, error) {
	ids, err := c.CreateFleetVehicleCosts([]*FleetVehicleCost{fvc})
	if err != nil {
		return -1, err
	}
	if len(ids) == 0 {
		return -1, nil
	}
	return ids[0], nil
}

// CreateFleetVehicleCost creates a new fleet.vehicle.cost model and returns its id.
func (c *Client) CreateFleetVehicleCosts(fvcs []*FleetVehicleCost) ([]int64, error) {
	var vv []interface{}
	for _, v := range fvcs {
		vv = append(vv, v)
	}
	return c.Create(FleetVehicleCostModel, vv, nil)
}

// UpdateFleetVehicleCost updates an existing fleet.vehicle.cost record.
func (c *Client) UpdateFleetVehicleCost(fvc *FleetVehicleCost) error {
	return c.UpdateFleetVehicleCosts([]int64{fvc.Id.Get()}, fvc)
}

// UpdateFleetVehicleCosts updates existing fleet.vehicle.cost records.
// All records (represented by ids) will be updated by fvc values.
func (c *Client) UpdateFleetVehicleCosts(ids []int64, fvc *FleetVehicleCost) error {
	return c.Update(FleetVehicleCostModel, ids, fvc, nil)
}

// DeleteFleetVehicleCost deletes an existing fleet.vehicle.cost record.
func (c *Client) DeleteFleetVehicleCost(id int64) error {
	return c.DeleteFleetVehicleCosts([]int64{id})
}

// DeleteFleetVehicleCosts deletes existing fleet.vehicle.cost records.
func (c *Client) DeleteFleetVehicleCosts(ids []int64) error {
	return c.Delete(FleetVehicleCostModel, ids)
}

// GetFleetVehicleCost gets fleet.vehicle.cost existing record.
func (c *Client) GetFleetVehicleCost(id int64) (*FleetVehicleCost, error) {
	fvcs, err := c.GetFleetVehicleCosts([]int64{id})
	if err != nil {
		return nil, err
	}
	return &((*fvcs)[0]), nil
}

// GetFleetVehicleCosts gets fleet.vehicle.cost existing records.
func (c *Client) GetFleetVehicleCosts(ids []int64) (*FleetVehicleCosts, error) {
	fvcs := &FleetVehicleCosts{}
	if err := c.Read(FleetVehicleCostModel, ids, nil, fvcs); err != nil {
		return nil, err
	}
	return fvcs, nil
}

// FindFleetVehicleCost finds fleet.vehicle.cost record by querying it with criteria.
func (c *Client) FindFleetVehicleCost(criteria *Criteria) (*FleetVehicleCost, error) {
	fvcs := &FleetVehicleCosts{}
	if err := c.SearchRead(FleetVehicleCostModel, criteria, NewOptions().Limit(1), fvcs); err != nil {
		return nil, err
	}
	return &((*fvcs)[0]), nil
}

// FindFleetVehicleCosts finds fleet.vehicle.cost records by querying it
// and filtering it with criteria and options.
func (c *Client) FindFleetVehicleCosts(criteria *Criteria, options *Options) (*FleetVehicleCosts, error) {
	fvcs := &FleetVehicleCosts{}
	if err := c.SearchRead(FleetVehicleCostModel, criteria, options, fvcs); err != nil {
		return nil, err
	}
	return fvcs, nil
}

// FindFleetVehicleCostIds finds records ids by querying it
// and filtering it with criteria and options.
func (c *Client) FindFleetVehicleCostIds(criteria *Criteria, options *Options) ([]int64, error) {
	return c.Search(FleetVehicleCostModel, criteria, options)
}

// FindFleetVehicleCostId finds record id by querying it with criteria.
func (c *Client) FindFleetVehicleCostId(criteria *Criteria, options *Options) (int64, error) {
	ids, err := c.Search(FleetVehicleCostModel, criteria, options)
	if err != nil {
		return -1, err
	}
	return ids[0], nil
}
