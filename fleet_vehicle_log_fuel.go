package odoo

// FleetVehicleLogFuel represents fleet.vehicle.log.fuel model.
type FleetVehicleLogFuel struct {
	LastUpdate    *Time      `xmlrpc:"__last_update,omitempty"`
	Amount        *Float     `xmlrpc:"amount,omitempty"`
	AutoGenerated *Bool      `xmlrpc:"auto_generated,omitempty"`
	CompanyId     *Many2One  `xmlrpc:"company_id,omitempty"`
	ContractId    *Many2One  `xmlrpc:"contract_id,omitempty"`
	CostAmount    *Float     `xmlrpc:"cost_amount,omitempty"`
	CostId        *Many2One  `xmlrpc:"cost_id,omitempty"`
	CostIds       *Relation  `xmlrpc:"cost_ids,omitempty"`
	CostSubtypeId *Many2One  `xmlrpc:"cost_subtype_id,omitempty"`
	CostType      *Selection `xmlrpc:"cost_type,omitempty"`
	CreateDate    *Time      `xmlrpc:"create_date,omitempty"`
	CreateUid     *Many2One  `xmlrpc:"create_uid,omitempty"`
	CurrencyId    *Many2One  `xmlrpc:"currency_id,omitempty"`
	Date          *Time      `xmlrpc:"date,omitempty"`
	Description   *String    `xmlrpc:"description,omitempty"`
	DisplayName   *String    `xmlrpc:"display_name,omitempty"`
	Id            *Int       `xmlrpc:"id,omitempty"`
	InvRef        *String    `xmlrpc:"inv_ref,omitempty"`
	Liter         *Float     `xmlrpc:"liter,omitempty"`
	Name          *String    `xmlrpc:"name,omitempty"`
	Notes         *String    `xmlrpc:"notes,omitempty"`
	Odometer      *Float     `xmlrpc:"odometer,omitempty"`
	OdometerId    *Many2One  `xmlrpc:"odometer_id,omitempty"`
	OdometerUnit  *Selection `xmlrpc:"odometer_unit,omitempty"`
	ParentId      *Many2One  `xmlrpc:"parent_id,omitempty"`
	PricePerLiter *Float     `xmlrpc:"price_per_liter,omitempty"`
	PurchaserId   *Many2One  `xmlrpc:"purchaser_id,omitempty"`
	VehicleId     *Many2One  `xmlrpc:"vehicle_id,omitempty"`
	VendorId      *Many2One  `xmlrpc:"vendor_id,omitempty"`
	WriteDate     *Time      `xmlrpc:"write_date,omitempty"`
	WriteUid      *Many2One  `xmlrpc:"write_uid,omitempty"`
}

// FleetVehicleLogFuels represents array of fleet.vehicle.log.fuel model.
type FleetVehicleLogFuels []FleetVehicleLogFuel

// FleetVehicleLogFuelModel is the odoo model name.
const FleetVehicleLogFuelModel = "fleet.vehicle.log.fuel"

// Many2One convert FleetVehicleLogFuel to *Many2One.
func (fvlf *FleetVehicleLogFuel) Many2One() *Many2One {
	return NewMany2One(fvlf.Id.Get(), "")
}

// CreateFleetVehicleLogFuel creates a new fleet.vehicle.log.fuel model and returns its id.
func (c *Client) CreateFleetVehicleLogFuel(fvlf *FleetVehicleLogFuel) (int64, error) {
	ids, err := c.CreateFleetVehicleLogFuels([]*FleetVehicleLogFuel{fvlf})
	if err != nil {
		return -1, err
	}
	if len(ids) == 0 {
		return -1, nil
	}
	return ids[0], nil
}

// CreateFleetVehicleLogFuel creates a new fleet.vehicle.log.fuel model and returns its id.
func (c *Client) CreateFleetVehicleLogFuels(fvlfs []*FleetVehicleLogFuel) ([]int64, error) {
	var vv []interface{}
	for _, v := range fvlfs {
		vv = append(vv, v)
	}
	return c.Create(FleetVehicleLogFuelModel, vv, nil)
}

// UpdateFleetVehicleLogFuel updates an existing fleet.vehicle.log.fuel record.
func (c *Client) UpdateFleetVehicleLogFuel(fvlf *FleetVehicleLogFuel) error {
	return c.UpdateFleetVehicleLogFuels([]int64{fvlf.Id.Get()}, fvlf)
}

// UpdateFleetVehicleLogFuels updates existing fleet.vehicle.log.fuel records.
// All records (represented by ids) will be updated by fvlf values.
func (c *Client) UpdateFleetVehicleLogFuels(ids []int64, fvlf *FleetVehicleLogFuel) error {
	return c.Update(FleetVehicleLogFuelModel, ids, fvlf, nil)
}

// DeleteFleetVehicleLogFuel deletes an existing fleet.vehicle.log.fuel record.
func (c *Client) DeleteFleetVehicleLogFuel(id int64) error {
	return c.DeleteFleetVehicleLogFuels([]int64{id})
}

// DeleteFleetVehicleLogFuels deletes existing fleet.vehicle.log.fuel records.
func (c *Client) DeleteFleetVehicleLogFuels(ids []int64) error {
	return c.Delete(FleetVehicleLogFuelModel, ids)
}

// GetFleetVehicleLogFuel gets fleet.vehicle.log.fuel existing record.
func (c *Client) GetFleetVehicleLogFuel(id int64) (*FleetVehicleLogFuel, error) {
	fvlfs, err := c.GetFleetVehicleLogFuels([]int64{id})
	if err != nil {
		return nil, err
	}
	return &((*fvlfs)[0]), nil
}

// GetFleetVehicleLogFuels gets fleet.vehicle.log.fuel existing records.
func (c *Client) GetFleetVehicleLogFuels(ids []int64) (*FleetVehicleLogFuels, error) {
	fvlfs := &FleetVehicleLogFuels{}
	if err := c.Read(FleetVehicleLogFuelModel, ids, nil, fvlfs); err != nil {
		return nil, err
	}
	return fvlfs, nil
}

// FindFleetVehicleLogFuel finds fleet.vehicle.log.fuel record by querying it with criteria.
func (c *Client) FindFleetVehicleLogFuel(criteria *Criteria) (*FleetVehicleLogFuel, error) {
	fvlfs := &FleetVehicleLogFuels{}
	if err := c.SearchRead(FleetVehicleLogFuelModel, criteria, NewOptions().Limit(1), fvlfs); err != nil {
		return nil, err
	}
	return &((*fvlfs)[0]), nil
}

// FindFleetVehicleLogFuels finds fleet.vehicle.log.fuel records by querying it
// and filtering it with criteria and options.
func (c *Client) FindFleetVehicleLogFuels(criteria *Criteria, options *Options) (*FleetVehicleLogFuels, error) {
	fvlfs := &FleetVehicleLogFuels{}
	if err := c.SearchRead(FleetVehicleLogFuelModel, criteria, options, fvlfs); err != nil {
		return nil, err
	}
	return fvlfs, nil
}

// FindFleetVehicleLogFuelIds finds records ids by querying it
// and filtering it with criteria and options.
func (c *Client) FindFleetVehicleLogFuelIds(criteria *Criteria, options *Options) ([]int64, error) {
	return c.Search(FleetVehicleLogFuelModel, criteria, options)
}

// FindFleetVehicleLogFuelId finds record id by querying it with criteria.
func (c *Client) FindFleetVehicleLogFuelId(criteria *Criteria, options *Options) (int64, error) {
	ids, err := c.Search(FleetVehicleLogFuelModel, criteria, options)
	if err != nil {
		return -1, err
	}
	return ids[0], nil
}
